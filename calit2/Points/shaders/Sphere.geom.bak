#version 330
#extension GL_EXT_gpu_shader4 : enable
#extension GL_EXT_geometry_shader4: enable

layout(points) in;
layout(triangle_strip, max_vertices = 4) out;


out vec3 vertex_light_position;
out vec4 eye_position;
out float sphere_radius;
uniform float objectScale;
uniform float pointSize;

void
main(void)
{

    int test = floatBitsToInt(gl_Position[0].x);

    // check point close enough
    //if( length(gl_PositionIn[0].xyz) < 10000.0 )
    if( (test & 1) == 1 )
    {
    	sphere_radius = gl_FrontColorIn[0].a * objectScale * pointSize * 2.0;
    	float halfsize = sphere_radius * 0.5;

    	gl_TexCoord[0] = gl_TexCoordIn[0][0];
    	gl_FrontColor = gl_FrontColorIn[0];
    	gl_FrontColor.a = 1.0;

    	vertex_light_position = normalize(gl_LightSource[0].position.xyz);
    	eye_position = gl_PositionIn[0];

    	gl_TexCoord[0].st = vec2(-1.0,-1.0);
    	gl_Position = gl_PositionIn[0];
    	gl_Position.xy += vec2(-halfsize, -halfsize);
    	gl_Position = gl_ProjectionMatrix * gl_Position;
    	EmitVertex();
    
    	gl_TexCoord[0].st = vec2(-1.0,1.0);
    	gl_Position = gl_PositionIn[0];
    	gl_Position.xy += vec2(-halfsize, halfsize);
    	gl_Position = gl_ProjectionMatrix * gl_Position;
    	EmitVertex();
    
    	gl_TexCoord[0].st = vec2(1.0,-1.0);
    	gl_Position = gl_PositionIn[0];
    	gl_Position.xy += vec2(halfsize, -halfsize);
    	gl_Position = gl_ProjectionMatrix * gl_Position;
    	EmitVertex();
    
    	gl_TexCoord[0].st = vec2(1.0,1.0);
    	gl_Position = gl_PositionIn[0];
    	gl_Position.xy += vec2(halfsize, halfsize);
    	gl_Position = gl_ProjectionMatrix * gl_Position;
    	EmitVertex();

    	EndPrimitive();
    }
}
